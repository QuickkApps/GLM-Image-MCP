name: Test GLM Image MCP Server

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [14.x, 16.x, 18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run syntax check
      run: node -c glm-image-mcp.js
      
    - name: Run tests
      run: npm test
      env:
        NODE_ENV: test
        
    - name: Test package.json validity
      run: npm pack --dry-run
      
    - name: Check for security vulnerabilities
      run: npm audit --audit-level moderate

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint (if configured)
      run: |
        if [ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ]; then
          npm run lint
        else
          echo "ESLint not configured, skipping lint check"
        fi

  integration-test:
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Test MCP server startup
      run: |
        timeout 10s node glm-image-mcp.js || true
        
    - name: Validate MCP tools schema
      run: |
        node -e "
        const { Server } = require('@modelcontextprotocol/sdk/server/index.js');
        const fs = require('fs');
        
        // Basic validation that the server can be imported
        try {
          const serverCode = fs.readFileSync('glm-image-mcp.js', 'utf8');
          if (serverCode.includes('ListToolsRequestSchema') && 
              serverCode.includes('CallToolRequestSchema')) {
            console.log('✅ MCP server schema validation passed');
          } else {
            process.exit(1);
          }
        } catch (error) {
          console.error('❌ MCP server validation failed:', error.message);
          process.exit(1);
        }
        "

  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Create distribution package
      run: npm pack
      
    - name: Upload package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: npm-package
        path: "*.tgz"
        retention-days: 7

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level moderate
      
    - name: Check for sensitive data
      run: |
        # Check for potential API keys or sensitive data
        if grep -r "sk-\|AIza\|gsk_" --include="*.js" --include="*.json" --exclude-dir=node_modules .; then
          echo "❌ Potential sensitive data found"
          exit 1
        else
          echo "✅ No sensitive data detected"
        fi